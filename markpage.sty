%#####################################################
%markpage package for annotating pdf files
%
%author: Ben Pooley
%version: 1.0a
%date: 31/03/2020
%

\NeedsTeXFormat{LaTeX2e}[1994/06/01]
\ProvidesPackage{markpage}[2020/03/25]

\RequirePackage{pdfpages}
\RequirePackage{varwidth}
\RequirePackage{tikz}
\RequirePackage{environ}
\RequirePackage{keyval}




%#####################################################____LENGTHS
\newlength{\mp@gMarkMargin}
\newlength{\mp@mMarkMargin}%mark margin added to current page
\setlength{\mp@gMarkMargin}{5cm}%default margin (can be set per page)
\newlength{\mp@gNoteWidth}%default text width for notes
\setlength{\mp@gNoteWidth}{4.5cm}
\newlength{\mp@mNoteWidth}%per-page note width
\newlength{\mp@gNotePadOut}%distance between edge of page and outer edge of remark
\setlength{\mp@gNotePadOut}{0.5cm}

\newlength{\mp@pdfpaperWidth}%dimensions of included document
\newlength{\mp@pdfpaperHeight}

\newlength{\mp@pdfxoffset}%offset of included page in enlarged page
\newlength{\mp@pdfyoffset}

\newlength\mp@nLineWidth%max text width of particular note

\newlength\mp@hLineWidth%max text width of particular note
%#####################################################____Num<->Char
\def\mp@first(#1#2){#1}
\newcommand{\mp@charToInta}[1]{\the\numexpr `#1-96}
\newcommand{\mp@charToIntA}[1]{\the\numexpr `#1-38}
\newcommand{\mp@charToInt}[1]{\ifnum \numexpr\expandafter`\mp@first(#1)<58 #1 \else\ifnum \numexpr\expandafter`\mp@first(#1)>96 \mp@charToInta#1 \else \mp@charToIntA#1\fi\fi}
\newcommand{\mp@intToChar}[1]{\ifnum #1>52 #1\else \ifnum #1<1 #1 \else\ifnum #1>26 \symbol{\numexpr #1+38}\else\symbol{\numexpr #1+96}\fi\fi\fi}
%#####################################################____FLAGS
\def\mp@eof{0}%set to 1 when no more pages available to include

%#####################################################____OPTIONS
\def\mp@showgrid{0}
\define@key{mpkeys}{grid}[]{\def\mp@showgrid{1}}%Grid

\def\mp@fileprefix{abc00_hwX}
\define@key{mpkeys}{source}{\def\mp@fileprefix{#1}}%source

\define@key{mpkeys}{margin}{\setlength\mp@gMarkMargin{#1}}%margin
\define@key{mpkeys}{notewidth}{\setlength\mp@gNoteWidth{#1}}%note width

\def\mp@shortcuts{1}
\define@key{mpkeys}{noshortcuts}[]{\def\mp@shortcuts{0}}%shortcuts

\def\mp@kvfam{{mpkeys}}
\DeclareOption*{\expandafter\expandafter\expandafter\setkeys\expandafter\mp@kvfam\expandafter{\CurrentOption}}
\ProcessOptions\relax

%________________________________________________________________%
\def\mp@mDefaults{}%mpage defaults
\newcommand\mpageDefaults[1]{\def\mp@mDefaults{#1}}
\def\mp@nDefaults{}%mnote defaults
\newcommand\mnoteDefaults[1]{\def\mp@nDefaults{#1}}
\def\mp@hDefaults{}%mnoth defaults
\newcommand\mnothDefaults[1]{\def\mp@hDefaults{#1}}

%#####################################################____ARGCONCAT
\newcommand\mp@argconcat[2]{#1\if#1\empty\else\if#2\empty\else,\fi\fi#2}
%#####################################################____MNOTE
%mnote keyvals
\newcommand{\mp@nDefaultOpts}{
\def\mp@nXoffset{0}%offset of note from default. cm
\def\mp@nYoffset{0}
\setlength{\mp@nLineWidth}{\mp@mNoteWidth}
\def\mp@nAnchorP{west}%portrait anchor
\def\mp@nAnchorL{north}%landscape anchor
\def\mp@nColour{red}
\def\mp@nLineOpts{}
\def\mp@nBend{0}%degrees bend of the line +ve for left bend
}
\define@key{mpnKeys}{xoff}{\def\mp@nXoffset{#1}}%xoff
\define@key{mpnKeys}{yoff}{\def\mp@nYoffset{#1}}%yoff
\define@key{mpnKeys}{width}{\setlength\mp@nLineWidth{#1}}%width
\define@key{mpnKeys}{anchor}{\def\mp@nAnchorP{#1}
\def\mp@nAnchorL{#1}}%set anchors for landscape and portrait modes 
\define@key{mpnKeys}{colour}{\def\mp@nColour{#1}}
\define@key{mpnKeys}{line opts}{\def\mp@nLineOpts{,#1}}%Other tikz options for the lines can be set here
\define@key{mpnKeys}{bend}{\def\mp@nBend{#1}}

%________________________________________________________________________%
%mnote command
\newcommand{\mnote}[4][]{
%reset default option values
\mp@nDefaultOpts
%handle options
\def\mpnKeys{{mpnKeys}}
\edef\mpArgExp{\mp@argconcat{\mp@nDefaults}{#1}}%preexpand concatenation of new args and defaults
\expandafter\expandafter\expandafter\setkeys\expandafter\mpnKeys\expandafter{\mpArgExp}

\expandafter\draw\expandafter[\expandafter\mp@nColour\mp@nLineOpts] (\mp@charToInt{#2} cm,\mp@charToInt{#3} cm)node[shape=circle,minimum size=6pt, inner sep=0pt, fill]{}
\if\mp@portraitmode1%portrait mode
 to [bend left=\mp@nBend] %highlighter end
 (\the\mp@pdfpaperWidth+\the\mp@mMarkMargin-\the\mp@gNotePadOut -\the\mp@nLineWidth + \mp@nXoffset cm,\mp@charToInt{#3} cm+\mp@nYoffset cm)  node[anchor=\mp@nAnchorP]{ \begin{varwidth}{\the\mp@nLineWidth}#4\end{varwidth}};
\else%landscape mode
 to [bend left=\mp@nBend] %highlighter end
 (\mp@charToInt{#2} cm+ \mp@nXoffset cm,\the\mp@gNotePadOut +\the\mp@nLineWidth-\the\mp@mMarkMargin+ \mp@nYoffset cm)   node[anchor=\mp@nAnchorL]{  \begin{varwidth}{\mp@nLineWidth}#4\end{varwidth}};
\fi
}

%#####################################################____MNOTH
%Put note at given position (not at margin)
%mnoth keyvals
\newcommand{\mp@hDefaultOpts}{
\setlength{\mp@hLineWidth}{\mp@mNoteWidth}
\def\mp@hColour{red}
\def\mp@hNodeOpts{}
}

\define@key{mphKeys}{width}{\setlength\mp@hLineWidth{#1}}%width
\define@key{mphKeys}{node opts}{\def\mp@hNodeOpts{,#1}}%Other tikz options can be set here
\define@key{mphKeys}{colour}{\def\mp@hColour{#1}}

%________________________________________________________________________%
%mnoth command
\newcommand{\mnoth}[4][]{
%reset default option values
\mp@hDefaultOpts
%handle options
\def\mphKeys{{mphKeys}}
\edef\mpArgExp{\mp@argconcat{\mp@hDefaults}{#1}}%preexpand concatenation of new args and defaults
\expandafter\expandafter\expandafter\setkeys\expandafter\mphKeys\expandafter{\mpArgExp}

\edef\NodeParams{anchor=north west\mp@hNodeOpts}
\edef\DrawPreamble{[\mp@hColour] (\mp@charToInt{#2} cm,\mp@charToInt{#3} cm)node}
\expandafter\draw\expandafter\DrawPreamble\expandafter[\NodeParams]{ \begin{varwidth}{\the\mp@hLineWidth}#4\end{varwidth}};
}

%#####################################################____MGRID
\newcommand{\mgrid}{
\if\mp@showgrid 1%Show grid...

\def\mp@pageheightcm{\numexpr\mp@pdfpaperHeight/\dimexpr1cm\relax}%row/col count for 1cm grid
\def\mp@pagewidthcm{\numexpr\mp@pdfpaperWidth/\dimexpr1cm\relax}


\if\mp@mShowSubgrid1\draw[lightgray, step=0.5cm] (0,0) grid (\mp@pdfpaperWidth,\mp@pdfpaperHeight);\fi
\draw[gray, step=1cm] (0,0) grid (\mp@pdfpaperWidth,\mp@pdfpaperHeight);
\foreach \k in{1,2,...,\mp@pagewidthcm-1}{%x-labels
\if\mp@mGridNumS 1\draw[\mp@mGridNumColour] (\k cm,\mp@mGridNumSInset cm) node[anchor=north east]{\mp@intToChar{\k}};\fi
\if\mp@mGridNumN 1\draw[\mp@mGridNumColour] (\k cm,\the\mp@pageheightcm cm-\mp@mGridNumNInset cm) node[anchor=north east]{\mp@intToChar{\k}};\fi
}
\foreach \k in{1,2,...,\mp@pageheightcm-1}{%y-labels
\if\mp@mGridNumE 1\draw[\mp@mGridNumColour] (\the\mp@pagewidthcm cm-\mp@mGridNumEInset cm,\k cm) node[anchor=north west]{\mp@intToChar{\k}};\fi
\if\mp@mGridNumW 1 \draw[\mp@mGridNumColour](\mp@mGridNumWInset cm,\k cm) node[anchor=north west]{\mp@intToChar{\k}};\fi
}
\fi
}

%#####################################################____COUNTERS
\newcounter{mpDoc}%document counter (for solutions spread over multiple documents)
\newcounter{mpPage}[mpDoc]%next page in current document
\newcounter{mpAvailPages}[mpDoc]%number of pages in current document

%#####################################################____DECORATEDPATH
\newcommand{\mp@decoratedpath}%return path decorated by file number (or plain if mpDoc=0)
{\mp@fileprefix\if\thempDoc0\else_\thempDoc\fi.pdf}

%#####################################################____STEPTODOC
\newcommand{\mp@steptodoc}{%recursively update doc counter as needed to find a page(or set eof=1)
\if\mp@eof0
\ifnum\value{mpPage}<\value{mpAvailPages}
\else%page>=number of pages
\stepcounter{mpDoc}%also resets mpPage and mpAvailPages
\IfFileExists{\mp@decoratedpath}{
	\mp@checkmaxpages%update mpAvailPages 
	\mp@steptodoc{}%recursively check new document for a page to include
	}{	%no file found => end of pages to mark 
	\global\def\mp@eof{1}}%set eof flag
\fi%pages available
\fi%eof 0
}
%#####################################################____STEPCOUNTERS
\newcommand{\mp@stepcounters}[1][1]{%set optional parameter 0 to suppress end of file warning
\mp@steptodoc%make sure there are pages in current doc, or increment doc counter until they are (or eof)
\if\mp@eof0%increment counter to point to valid page, or optionally print warning if none available
\stepcounter{mpPage}
\global\edef\mp@lastpage{[\mp@decoratedpath:\thempPage]}%string representing current page and file
\else
	\if#11%unless warning suppressed
	\message{-----------------------------------------------------------------------------}
	\message{LaTeX Warning: No page found to load after \mp@lastpage. Any \noexpand\mnote calls that follow will not appear.}
	\fi
\fi
}

%#####################################################____CHECKMAXPAGES
\newcommand{\mp@checkmaxpages}{
\pdfximage{\mp@decoratedpath} 
\setcounter{mpAvailPages}{\the\pdflastximagepages}
}

%#####################################################____CHECKPAGEDIM
\newcommand{\mp@checkpagedim}{%update paper size options for next included page
\pdfximage page \thempPage{\mp@decoratedpath} %open specific page 
\setlength{\mp@pdfpaperWidth}{\pdfximagebbox\pdflastximage 3}
 \addtolength{\mp@pdfpaperWidth}{-\pdfximagebbox\pdflastximage 1}%find width
\setlength{\mp@pdfpaperHeight}{\pdfximagebbox\pdflastximage 4}
 \addtolength{\mp@pdfpaperHeight}{-\pdfximagebbox\pdflastximage 2}%find height
 
\ifnum \mp@pdfpaperWidth>\mp@pdfpaperHeight%set orientation
\def\mp@portraitmode{0}
\else
\def\mp@portraitmode{1}
\fi
  
\message{-----------------------------------------------------------------------------}
\message{\mp@lastpage: \the\mp@pdfpaperWidth\space by \the\mp@pdfpaperHeight}
}

%#####################################################____MPAGE
%mpage keyvals
\newcommand{\mp@mDefaultOpts}{
\setlength{\mp@mMarkMargin}{\mp@gMarkMargin}%copy global default margin
\setlength{\mp@mNoteWidth}{\mp@gNoteWidth}%copy global default margin

\mp@mNumToggle{1}{1}{1}{1}
\mp@mNumInset{3}{3}{5}{3}
\def\mp@mGridNumColour{purple}
\def\mp@mShowSubgrid{1}%1 or 0 to toggle subgrid (assuming grid is shown)
}
\newcommand\mp@mNumToggle[4]{
\def\mp@mGridNumN{#1}%north grid nos toggle 1 or 0
\def\mp@mGridNumS{#3}%south grid nos toggle 1 or 0
\def\mp@mGridNumE{#2}%east grid nos toggle 1 or 0
\def\mp@mGridNumW{#4}%west grid nos toggle 1 or 0
}

\newcommand\mp@mNumInset[4]{
\def\mp@mGridNumNInset{#1}%north grid nos inset in cm
\def\mp@mGridNumSInset{#3}%south grid nos inset in cm
\def\mp@mGridNumEInset{#2}%east grid nos inset in cm
\def\mp@mGridNumWInset{#4}%west grid nos inset in cm
}
\define@key{mpmKeys}{margin}{\setlength{\mp@mMarkMargin}{#1}}
\define@key{mpmKeys}{note width}{\setlength{\mp@mNoteWidth}{#1}}
\define@key{mpmKeys}{num show}{\mp@mNumToggle#1}
\define@key{mpmKeys}{num inset}{\mp@mNumInset#1}
\define@key{mpmKeys}{num colour}{\def\mp@mGridNumColour{#1}}
\define@key{mpmKeys}{subgrid show}{\def\mp@mShowSubgrid{#1}}

%________________________________________________________________________%
%Include next page in document, add comments using \mnote in this environment
\NewEnviron{mpage}[1][]{
\mp@mDefaultOpts
\def\mpmKeys{{mpmKeys}}
\edef\mpArgExp{\mp@argconcat{\mp@mDefaults}{#1}}%preexpand concatenation of new args and defaults
\expandafter\expandafter\expandafter\setkeys\expandafter\mpmKeys\expandafter{\mpArgExp}


\mp@stepcounters%start at page 1
\if\mp@eof0%ignore environment content if no page found

\mp@checkpagedim%update dimension of page
\setlength{\pdfpagewidth}{\mp@pdfpaperWidth}
\setlength{\pdfpageheight}{\mp@pdfpaperHeight}
\setlength{\mp@pdfxoffset}{0 pt}%offset of included page in enlarged page
\setlength{\mp@pdfyoffset}{0 pt}

\if\mp@portraitmode1
\addtolength{\pdfpagewidth}{\mp@mMarkMargin}%margin on right
%set page dimensions appropriately
\setlength{\mp@pdfxoffset}{-0.5\mp@mMarkMargin}
\else
\addtolength{\pdfpageheight}{\mp@mMarkMargin}%margin below
\setlength{\mp@pdfyoffset}{0.5\mp@mMarkMargin}
\fi
\setlength{\paperwidth}{\pdfpagewidth}%change paperwidth to match so that pdfpages aligns things correctly
\setlength{\paperheight}{\pdfpageheight}%change paperheight to match so that pdfpages aligns things correctly

\includepdf[pages= \thempPage, offset=\mp@pdfxoffset pt \mp@pdfyoffset pt,  picturecommand={\begin{tikzpicture}[remember picture, overlay, baseline={(0,-2\mp@pdfyoffset)}] \mgrid\BODY\end{tikzpicture}}]{\mp@decoratedpath}%%offset=\the\mp@pdfxoffset \the\mp@pdfyoffset
\fi%eof 
}

%#####################################################____MSTATUS
%call to check whether all pages read
%do this by looking for next page and checking that none can be found
%call only after all mpages used, or counters will be messed up!
\newcommand{\mstatus}{
\mp@stepcounters[0]{}
\IfFileExists{\mp@decoratedpath}{\errmessage{You missed some pages!}}{
\message{-----------------------------------------------------------------------------}
\message{All pages marked!}
\message{-----------------------------------------------------------------------------}}
}

%#####################################################____INITIALIZATION
\edef\mp@lastpage{[No page found]}%string representing last page found
%Only need this edef here if empty pdfs possible...

%Init counters.
\IfFileExists{\mp@decoratedpath}{}{\stepcounter{mpDoc}}%if prefix.pdf exists do nothing%Else look for prefix_1.pdf 
\IfFileExists{\mp@decoratedpath}{\mp@checkmaxpages}{\errmessage{\mp@decoratedpath not found!}}%path should be valid now, so check it

%#####################################################____Handy Symbols
\if\mp@shortcuts1
\RequirePackage{pifont}
\newcommand\mtick{\ding{51}}
\newcommand\mcross{\ding{55}}

%markpage shortcuts
\newcommand{\mtt}[2]{\mnoth #1#2 {\LARGE\mtick}}
\newcommand{\mcc}[2]{\mnoth #1#2 {\LARGE\mcross}}
\def\mt#1 #2#3/{\mnoth #2#3{\LARGE\mtick\large#1}}
\def\mc#1 #2#3/{\mnoth #2#3{\LARGE\mcross\large#1}} 
\def\mq#1 #2 #3#4/{\mnoth[node opts={ultra thick, shape=circle, draw}]#3#4{\Large$\displaystyle\frac{#1}{#2}$}}
%Usage e.g. \mtt ab %puts a large tick at column 'a', row 'b'
% \mc 5 xy/ %puts a cross and non-circled '5'  at column 'x' row 'y' 
% \mc good xy/ %puts a cross and non-circled 'good'  at column 'x' row 'y' 
%\mq 6 10 xy/ %puts Large 6/10 circled at column 'x' row 'y' 
\fi
\endinput